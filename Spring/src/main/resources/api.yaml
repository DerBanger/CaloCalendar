openapi: 3.0.3
info:
  title: User API
  description: API for managing users
  version: 1.0.0

servers:
  - url: http://localhost:8080
    #http://localhost:8080/swagger-ui/index.html#/
    #link f√ºr swagger-ui

tags:
  - name: UserProfile
  - name: GroceryItem
  - name: Meal

paths:
  /userProfile:
    post:
      tags:
        - UserProfile
      operationId: addUserProfile
      requestBody:
        description: Add a user to database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileModel'
        required: true
      responses:
        '200':
          description: UserProfile created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int64
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - UserProfile
      operationId: getAllUserProfiles
      responses:
        '200':
          description: A list of user profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileModel'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - UserProfile
      operationId: updateUserProfile
      requestBody:
        description:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileModel"
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileModel"
        '400':
          description: invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /userProfile/{id}:
    get:
      operationId: getUserProfileById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileModel'
        '404':
          description: User not found

    put:
      summary: Update a user by ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileModel'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileModel'
        '404':
          description: User not found

    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:
    UserProfileModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userName:
          type: string
          example: MaxMustermann
        gender:
          type: integer
          example: 1
        age:
          type: integer
          example: 25
        weight:
          type: integer
          example: 75000
        levelOfPhysicalActivity:
          type: integer
          example: 2
      required:
        - userName
        - gender
        - age
        - weight
        - levelOfPhysicalActivity
    GroceryItemModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Reis
        calories:
          type: integer
          example: 100
        weight:
          type: integer
          example: 250
    MealModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        mealName:
          type: string
          example: Pizza
    Error:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            type: string
          example: [ "Error message 1", "Error message 2" ]
          description: Fehlermeldungen
        status:
          type: string
          description: Ausgeschriebener HTTP Status
          example: "Bad Request"
